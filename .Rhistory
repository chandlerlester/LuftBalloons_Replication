install.packages("fredr")
install.packages("fredr")
library(fredr)
# Import FRED data
fredr(
series_id="TOTRESNS",
observation_start=as.date("1980-01-01"),
frequency = q
)
# Import FRED data
fredr(
series_id="TOTRESNS",
observation_start=as.Date("1980-01-01"),
frequency = q
)
# Import FRED data
fredr(
series_id="TOTRESNS",
observation_start=as.Date("1980-01-01"),
frequency = q
)
library(tidyr)
library(dplyr)
library(DataCombine)
library(magrittr)
library(readxl)
library(openintro)
library(tidyselect)
library(fredr)
# Import Per capita income data
SQINC1__ALL_AREAS_1948_2019 <- read.csv("Per_cap_inc/SQINC1__ALL_AREAS_1948_2019.csv", header=T, check.names=FALSE)
#Drop some variables
myvars<-names(SQINC1__ALL_AREAS_1948_2019) %in% c("GeoFIPS","TableName","IndustryClassification","Description","Unit")
newdata1 <-SQINC1__ALL_AREAS_1948_2019[!myvars]
# Gather years into one column
data1<-gather(newdata1, year, data, 4:289)
# Delete early data that has volatility
data2<-data1[-c(1:23552),]
# Get rid of line codes, turn the multiple rows into columns
data3<-data2%>%group_by(LineCode)%>%mutate(group_id=row_number())
data4<-data3%>%spread(LineCode, data)%>%select(-group_id)
data4<-data4%>%rename(Income="1",Population="2",Per_cap_Inc="3") #rename the new rows to makes sense
data4<-data4[1:6] # drop columns we don't need
data4<-data4%>%group_by("Reigon")
data4<-data4%>%drop_na #drop non-existent reigons
data4<-data4[1:6]
# Seperate the data into years and quarters to match home sales data
data5<-separate(data4, year, c("year", "quarter"), sep=":Q")
# Fix some variables
data5$year<-as.numeric(data5$year)  #make years and quarters numeric
data5$quarter<-as.numeric(data5$quarter)
data5$GeoName<-gsub(" [*]",'',data5$GeoName) #get rid of asteriks on Alaska and Hawaii
data6<-data5%>%filter(data5$GeoName%in%state.name)# get rid of the predetermined reigons
data6$GeoName<-state2abbr(data6$GeoName) #change from state names to state abreviations
data6<-data6%>%rename(state="GeoName")
# Rename the final data
final_percapinc <-data6
#Remove all access data
rm(list=setdiff(ls(),"final_percapinc"))
#Import the data set on state housing sales
HPI_PO_state <- read_excel("HPI_PO_state.xls")
HPI_data2<-HPI_PO_state%>%rename(year="yr", quarter="qtr")
# Combine the datasets
combined1<-left_join(final_percapinc, HPI_data2, by = c("state", "year", "quarter"))
combined1<-combined1[!(names(combined1)%in%c("Warning"))]
# Import FRED data
fredr(
series_id="TOTRESNS",
observation_start=as.Date("1980-01-01"),
frequency = q
)
# Get rid of rows with no housing data
combined2<-combined1%>%drop_na(index_nsa)
?fredr_set_key
# Import FRED data
fredr_set_key(fdfb11170350fa8831cbed74b73f256c)
# Import FRED data
fredr_set_key("fdfb11170350fa8831cbed74b73f256c")
fredr(
series_id="TOTRESNS",
observation_start=as.Date("1980-01-01"),
frequency = q
)
fredr(
series_id="UNRATE",
observation_start=as.Date("1980-01-01"),
frequency = q
)
fredr(
series_id="UNRATE",
observation_start=as.Date("1980-01-01")
)
fredr(
series_id="UNRATE",
observation_start=as.Date("1980-01-01"),
frequency = "q"
)
fredr(
series_id=c("TOTRESNS","FEDFUNDS"),
observation_start=as.Date("1980-01-01"),
frequency = "q"
)
fredr(
series_id=c("TOTRESNS"),
observation_start=as.Date("1980-01-01"),
frequency = "q"
)
?frer
?fredr
?fredr()
install.packages("purrr")
install.packages("purrr")
library(purrr)
if (requireNamespace("purrr", quietly = TRUE)) {
library(purrr)
purrr::map_dfr(c("TOTRESNS", "FEDFUNDS", "GDPDEF", "GDPC1", "MORTGAGE30US"), fredr)
# Using purrr::pmap_dfr() allows you to use varying optional parameters
params <- list(
series_id = c("TOTRESNS", "FEDFUNDS", "GDPDEF", "GDPC1", "MORTGAGE30US"),
frequency = c("q")
)
purrr::pmap_dfr(
.l = params,
.f = ~ fredr(series_id = .x, frequency = .y)
)
}
library(tidyr)
library(dplyr)
library(DataCombine)
library(magrittr)
library(readxl)
library(openintro)
library(tidyselect)
library(fredr)
library(purrr)
# Import Per capita income data
SQINC1__ALL_AREAS_1948_2019 <- read.csv("Per_cap_inc/SQINC1__ALL_AREAS_1948_2019.csv", header=T, check.names=FALSE)
#Drop some variables
myvars<-names(SQINC1__ALL_AREAS_1948_2019) %in% c("GeoFIPS","TableName","IndustryClassification","Description","Unit")
newdata1 <-SQINC1__ALL_AREAS_1948_2019[!myvars]
# Gather years into one column
data1<-gather(newdata1, year, data, 4:289)
# Delete early data that has volatility
data2<-data1[-c(1:23552),]
# Get rid of line codes, turn the multiple rows into columns
data3<-data2%>%group_by(LineCode)%>%mutate(group_id=row_number())
data4<-data3%>%spread(LineCode, data)%>%select(-group_id)
data4<-data4%>%rename(Income="1",Population="2",Per_cap_Inc="3") #rename the new rows to makes sense
data4<-data4[1:6] # drop columns we don't need
data4<-data4%>%group_by("Reigon")
data4<-data4%>%drop_na #drop non-existent reigons
data4<-data4[1:6]
# Seperate the data into years and quarters to match home sales data
data5<-separate(data4, year, c("year", "quarter"), sep=":Q")
# Fix some variables
data5$year<-as.numeric(data5$year)  #make years and quarters numeric
data5$quarter<-as.numeric(data5$quarter)
data5$GeoName<-gsub(" [*]",'',data5$GeoName) #get rid of asteriks on Alaska and Hawaii
data6<-data5%>%filter(data5$GeoName%in%state.name)# get rid of the predetermined reigons
data6$GeoName<-state2abbr(data6$GeoName) #change from state names to state abreviations
data6<-data6%>%rename(state="GeoName")
# Rename the final data
final_percapinc <-data6
#Remove all access data
rm(list=setdiff(ls(),"final_percapinc"))
#Import the data set on state housing sales
HPI_PO_state <- read_excel("HPI_PO_state.xls")
HPI_data2<-HPI_PO_state%>%rename(year="yr", quarter="qtr")
# Combine the datasets
combined1<-left_join(final_percapinc, HPI_data2, by = c("state", "year", "quarter"))
combined1<-combined1[!(names(combined1)%in%c("Warning"))]
# Import FRED data
fredr_set_key("fdfb11170350fa8831cbed74b73f256c")
if (requireNamespace("purrr", quietly = TRUE)) {
library(purrr)
purrr::map_dfr(c("TOTRESNS", "FEDFUNDS", "GDPDEF", "GDPC1", "MORTGAGE30US"), fredr)
# Using purrr::pmap_dfr() allows you to use varying optional parameters
params <- list(
series_id = c("TOTRESNS", "FEDFUNDS", "GDPDEF", "GDPC1", "MORTGAGE30US"),
frequency = c("q")
)
purrr::pmap_dfr(
.l = params,
.f = ~ fredr(series_id = .x, frequency = .y)
)
}
FREDdata<-if (requireNamespace("purrr", quietly = TRUE)) {
library(purrr)
purrr::map_dfr(c("TOTRESNS", "FEDFUNDS", "GDPDEF", "GDPC1", "MORTGAGE30US"), fredr)
# Using purrr::pmap_dfr() allows you to use varying optional parameters
params <- list(
series_id = c("TOTRESNS", "FEDFUNDS", "GDPDEF", "GDPC1", "MORTGAGE30US"),
frequency = c("q")
)
purrr::pmap_dfr(
.l = params,
.f = ~ fredr(series_id = .x, frequency = .y)
)
}
if (requireNamespace("purrr", quietly = TRUE)) {
library(purrr)
purrr::map_dfr(c("TOTRESNS", "FEDFUNDS", "GDPDEF", "GDPC1", "MORTGAGE30US"), fredr)
# Using purrr::pmap_dfr() allows you to use varying optional parameters
params <- list(
series_id = c("TOTRESNS", "FEDFUNDS", "GDPDEF", "GDPC1", "MORTGAGE30US"),
frequency = c("q")
)
purrr::pmap_dfr(
.l = params,
.f = ~ fredr(series_id = .x, frequency = .y)
)
}
FREData<-(if (requireNamespace("purrr", quietly = TRUE)) {
library(purrr)
purrr::map_dfr(c("TOTRESNS", "FEDFUNDS", "GDPDEF", "GDPC1", "MORTGAGE30US"), fredr)
# Using purrr::pmap_dfr() allows you to use varying optional parameters
params <- list(
series_id = c("TOTRESNS", "FEDFUNDS", "GDPDEF", "GDPC1", "MORTGAGE30US"),
frequency = c("q")
)
purrr::pmap_dfr(
.l = params,
.f = ~ fredr(series_id = .x, frequency = .y)
)
})
View(FREData)
# Using purrr::pmap_dfr() allows you to use varying optional parameters
params <- list(
series_id = c("TOTRESNS", "FEDFUNDS", "GDPDEF", "GDPC1", "MORTGAGE30US"),
frequency = c("q","q","q","q","q")
)
View(FREData)
# Unstack the series
FREData<-FREData%>%group_by(date)%>%mutate(group_id=row_number())
# Unstack the series
FREData<-FREData%>%group_by(date)%>%mutate(group_id=row_number())
# Unstack the series
FREData<-FREData%>%group_by(date)%>%mutate(group_id=row_number())
FREData<-FREData%>%spread(date, series_id)%>%select(-group_id)
FREData<-(if (requireNamespace("purrr", quietly = TRUE)) {
library(purrr)
purrr::map_dfr(c("TOTRESNS", "FEDFUNDS", "GDPDEF", "GDPC1", "MORTGAGE30US"), fredr)
# Using purrr::pmap_dfr() allows you to use varying optional parameters
params <- list(
series_id = c("TOTRESNS", "FEDFUNDS", "GDPDEF", "GDPC1", "MORTGAGE30US"),
frequency = c("q","q","q","q","q")
)
purrr::pmap_dfr(
.l = params,
.f = ~ fredr(series_id = .x, frequency = .y)
)
})
# Unstack the series
FREData<-FREData%>%group_by(series_id)%>%mutate(group_id=row_number())
FREData<-FREData%>%spread(series_id, value)%>%select(-group_id)
FREData<-(if (requireNamespace("purrr", quietly = TRUE)) {
library(purrr)
purrr::map_dfr(c("TOTRESNS", "FEDFUNDS", "GDPDEF", "GDPC1", "MORTGAGE30US"), fredr)
# Using purrr::pmap_dfr() allows you to use varying optional parameters
params <- list(
series_id = c("TOTRESNS", "FEDFUNDS", "GDPDEF", "GDPC1", "MORTGAGE30US"),
frequency = c("q","q","q","q","q")
)
purrr::pmap_dfr(
.l = params,
.f = ~ fredr(series_id = .x, observation_start = as.Date("1980-01-01"), frequency = .y)
)
})
# Unstack the series
FREData<-FREData%>%group_by(series_id)%>%mutate(group_id=row_number())
FREData<-FREData%>%spread(series_id, value)%>%select(-group_id)
# Make the year match other dates
FREData1<-separate(FREData, date, c("year", "quarter", "month"), sep="-0")
View(FREData1)
View(FREData1)
?as.yearqtr
??as.yearqtr
?format
?gsub
FREData1<-separate(FREData, date, c("year", "quarter", "month"), sep="-")
FREData1$quarter<-gsub(c("01", "04", "07", "10"),c("1","2","3","4"),FREData1$quarter)
FREData1$quarter<-gsub("01","1",FREData1$quarter)
# Make the year match other dates
FREData1<-separate(FREData, date, c("year", "quarter", "month"), sep="-")
FREData1$quarter<-gsub("01","1",FREData1$quarter)
FREData1$quarter<-gsub("04","2",FREData1$quarter)
FREData1$quarter<-gsub("07","3",FREData1$quarter)
FREData1$quarter<-gsub("10","4",FREData1$quarter)
FREData1<-separate(FREData, date, c("year", "quarter", "day"), sep="-")
FREData1$quarter<-gsub("01","1",FREData1$quarter)
FREData1$quarter<-gsub("04","2",FREData1$quarter)
FREData1$quarter<-gsub("07","3",FREData1$quarter)
FREData1$quarter<-gsub("10","4",FREData1$quarter)
FREData1<-FREData1[,-3] #drop day
# Combine FRED and other data
combined2<-left_join(combined1, FREData1, by = c("year", "quarter"))
FREData1$year<-as.numeric(FREData1$year)  #make years and quarters numeric
FREData1$quarter<-as.numeric(FREData1$quarter)
# Combine FRED and other data
combined2<-left_join(combined1, FREData1, by = c("year", "quarter"))
View(combined2)
# Get rid of rows with no housing data
combined2<-combined1%>%drop_na(index_nsa)
# Combine FRED and other data
combined2<-left_join(combined1, FREData1, by = c("year", "quarter"))
# Get rid of rows with no housing data
combined2<-combined2%>%drop_na(index_nsa)
?tidyselect
# Remove other data from workspace
rm(list=setdiff(ls(),"Luft_balloons_data"))
library(tidyr)
library(dplyr)
library(DataCombine)
library(magrittr)
library(openintro)
library(tidyselect)
# Import Per capita income data
SQINC1__ALL_AREAS_1948_2019 <- read.csv("Per_cap_inc/SQINC1__ALL_AREAS_1948_2019.csv", header=T, check.names=FALSE)
#Drop some variables
myvars<-names(SQINC1__ALL_AREAS_1948_2019) %in% c("GeoFIPS","TableName","IndustryClassification","Description","Unit")
newdata1 <-SQINC1__ALL_AREAS_1948_2019[!myvars]
# Gather years into one column
data1<-gather(newdata1, year, data, 4:289)
# Delete early data that has volatility
data2<-data1[-c(1:23552),]
# Get rid of line codes, turn the multiple rows into columns
data3<-data2%>%group_by(LineCode)%>%mutate(group_id=row_number())
data4<-data3%>%spread(LineCode, data)%>%select(-group_id)
data4<-data4%>%rename(Income="1",Population="2",Per_cap_Inc="3") #rename the new rows to makes sense
data4<-data4[1:6] # drop columns we don't need
data4<-data4%>%group_by("Reigon")
data4<-data4%>%drop_na #drop non-existent reigons
data4<-data4[1:6]
# Seperate the data into years and quarters to match home sales data
data5<-separate(data4, year, c("year", "quarter"), sep=":Q")
# Fix some variables
data5$year<-as.numeric(data5$year)  #make years and quarters numeric
data5$quarter<-as.numeric(data5$quarter)
data5$GeoName<-gsub(" [*]",'',data5$GeoName) #get rid of asteriks on Alaska and Hawaii
data6<-data5%>%filter(data5$GeoName%in%state.name)# get rid of the predetermined reigons
data6$GeoName<-state2abbr(data6$GeoName) #change from state names to state abreviations
data6<-data6%>%rename(state="GeoName")
# Rename the final data
final_percapinc <-data6
#Remove all access data
rm(list=setdiff(ls(),"final_percapinc"))
###############################################################################################################################
library(readxl)
#Import the data set on state housing sales
HPI_PO_state <- read_excel("HPI_PO_state.xls")
HPI_data2<-HPI_PO_state%>%rename(year="yr", quarter="qtr")
# Combine the datasets
combined1<-left_join(final_percapinc, HPI_data2, by = c("state", "year", "quarter"))
combined1<-combined1[!(names(combined1)%in%c("Warning"))]
################################################################################################################################
# Import FRED data
library(fredr)#to get the data
library(purrr)#to pull multiple series at one
fredr_set_key("fdfb11170350fa8831cbed74b73f256c")
FREData<-(if (requireNamespace("purrr", quietly = TRUE)) {
library(purrr)
purrr::map_dfr(c("TOTRESNS", "FEDFUNDS", "GDPDEF", "GDPC1", "MORTGAGE30US"), fredr)
# Using purrr::pmap_dfr() allows you to use varying optional parameters
params <- list(
series_id = c("TOTRESNS", "FEDFUNDS", "GDPDEF", "GDPC1", "MORTGAGE30US"),
frequency = c("q","q","q","q","q")
)
purrr::pmap_dfr(
.l = params,
.f = ~ fredr(series_id = .x, observation_start = as.Date("1980-01-01"), frequency = .y)
)
})
# Unstack the series
FREData<-FREData%>%group_by(series_id)%>%mutate(group_id=row_number())
FREData<-FREData%>%spread(series_id, value)%>%select(-group_id)
# Make the year match other dates
FREData1<-separate(FREData, date, c("year", "quarter", "day"), sep="-")
FREData1$quarter<-gsub("01","1",FREData1$quarter)
FREData1$quarter<-gsub("04","2",FREData1$quarter)
FREData1$quarter<-gsub("07","3",FREData1$quarter)
FREData1$quarter<-gsub("10","4",FREData1$quarter)
FREData1<-FREData1[,-3] #drop day
# make year and quarter numeric
FREData1$year<-as.numeric(FREData1$year)  #make years and quarters numeric
FREData1$quarter<-as.numeric(FREData1$quarter)
##################################################################################################################################
# Combine FRED and other data
combined2<-left_join(combined1, FREData1, by = c("year", "quarter"))
# Get rid of rows with no housing data
Luft_balloons_data<-combined2%>%drop_na(index_nsa)
# Remove other data from workspace
rm(list=setdiff(ls(),"Luft_balloons_data"))
View(Luft_balloons_data)
